// writer/worker.js (Phi√™n b·∫£n cu·ªëi c√πng, d√πng state online)
const fs = require('fs');
const path = require('path');
const { generateText } = require('./gemini.js');
const prompts = require('./prompts.js');
const { claimChapterTask } = require('./firestore-state.js'); 
const { BOOKS_DIR, slugify } = require('../helper.js');
const { CHECK_INTERVAL_MINUTES } = require('./config.js');

const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function findNextChapterToDo_Offline() {
    if (!fs.existsSync(BOOKS_DIR)) return null;
    const bookSlugs = fs.readdirSync(BOOKS_DIR).filter(f => fs.statSync(path.join(BOOKS_DIR, f)).isDirectory());

    for (const bookSlug of bookSlugs) {
        const bookDir = path.join(BOOKS_DIR, bookSlug);
        const outlinePath = path.join(bookDir, 'outline.json');
        if (!fs.existsSync(outlinePath)) continue;

        const outline = JSON.parse(fs.readFileSync(outlinePath, 'utf-8'));
        for (const chapterInfo of outline.chapters) {
            const chapterFilePath = path.join(bookDir, `${String(chapterInfo.chapter).padStart(2, '0')}-${slugify(chapterInfo.title)}.md`);
            if (!fs.existsSync(chapterFilePath)) {
                const previousChapterSummary = chapterInfo.chapter > 1 ? outline.chapters[chapterInfo.chapter - 2].summary : null;
                return { bookSlug, bookDir, outline, chapterInfo, previousChapterSummary };
            }
        }
    }
    return null;
}

async function startOfflineWorker() {
    console.log("üöÄ Offline AI Worker ƒë√£ kh·ªüi ƒë·ªông (State ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi Firestore).");
    console.log("Nh·∫•n CTRL+C ƒë·ªÉ d·ª´ng worker.");

    while (true) {
        try {
            const taskInfo = await findNextChapterToDo_Offline();
            if (!taskInfo) {
                console.log(`(Offline) Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng n√†o ƒë·ªÉ vi·∫øt ·ªü local. Ki·ªÉm tra l·∫°i sau ${CHECK_INTERVAL_MINUTES} ph√∫t...`);
                await sleep(CHECK_INTERVAL_MINUTES * 60 * 1000);
                continue;
            }

            const canWork = await claimChapterTask(taskInfo.bookSlug);
            if (!canWork) {
                console.log(`(Offline) [${taskInfo.bookSlug}] Kh√¥ng th·ªÉ ƒë√≤i quy·ªÅn vi·∫øt. Worker kh√°c c√≥ th·ªÉ ƒëang l√†m vi·ªác ho·∫∑c ƒë√£ h·∫øt l∆∞·ª£t.`);
                await sleep(5000); // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
                continue;
            }

            const { bookDir, outline, chapterInfo, previousChapterSummary } = taskInfo;
            console.log(`\n(Offline) ƒê√£ ƒë√≤i quy·ªÅn! B·∫Øt ƒë·∫ßu vi·∫øt [Ch∆∞∆°ng ${chapterInfo.chapter}: ${chapterInfo.title}] (L∆∞u v√†o file local)...`);
            
            const chapterPrompt = prompts.createChapterContent(outline.title, outline.genre, chapterInfo.title, chapterInfo.summary, previousChapterSummary);
            const chapterContent = await generateText(chapterPrompt);

            const chapterFileName = `${String(chapterInfo.chapter).padStart(2, '0')}-${slugify(chapterInfo.title)}.md`;
            fs.writeFileSync(path.join(bookDir, chapterFileName), `# Ch∆∞∆°ng ${chapterInfo.chapter}: ${chapterInfo.title}\n\n${chapterContent}`);
            
            console.log(`‚úÖ (Offline) ƒê√£ vi·∫øt v√† l∆∞u th√†nh c√¥ng Ch∆∞∆°ng ${chapterInfo.chapter} v√†o file.`);
            await sleep(2000);

        } catch (error) {
            console.error("\n‚ùå G·∫∑p l·ªói trong worker offline.", error);
            await sleep(5 * 60 * 1000);
        }
    }
}

startOfflineWorker();