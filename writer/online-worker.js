// writer/online-worker.js (Phi√™n b·∫£n "Web Service" ho√†n ch·ªânh cho Koyeb/Heroku/...)

// --- PH·∫¶N 1: IMPORT C√ÅC TH∆Ø VI·ªÜN C·∫¶N THI·∫æT ---
const express = require("express"); // Th√™m express ƒë·ªÉ t·∫°o server gi·∫£
const admin = require("firebase-admin");
const { FIREBASE_SERVICE_ACCOUNT, CHECK_INTERVAL_MINUTES } = require("./config.js");
const { generateText } = require("./gemini.js");
const { claimChapterTask } = require("./firestore-state.js");
const prompts = require("./prompts.js");

// --- PH·∫¶N 2: KH·ªûI T·∫†O C√ÅC D·ªäCH V·ª§ & H·∫∞NG S·ªê ---

// Kh·ªüi t·∫°o Firebase Admin m·ªôt l·∫ßn duy nh·∫•t
if (!admin.apps.length) {
  if (!FIREBASE_SERVICE_ACCOUNT) {
    throw new Error(
      "Kh√¥ng th·ªÉ kh·ªüi t·∫°o online-worker.js do thi·∫øu c·∫•u h√¨nh Firebase."
    );
  }
  admin.initializeApp({
    credential: admin.credential.cert(FIREBASE_SERVICE_ACCOUNT),
  });
}
const db = admin.firestore();

// C√°c h·∫±ng s·ªë ƒëi·ªÅu khi·ªÉn ho·∫°t ƒë·ªông c·ªßa worker
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// --- PH·∫¶N 3: LOGIC C·ªêT L√ïI C·ª¶A WORKER ---

/**
 * T√¨m ch∆∞∆°ng ti·∫øp theo c·∫ßn vi·∫øt b·∫±ng c√°ch so s√°nh d√†n √Ω v√† c√°c ch∆∞∆°ng ƒë√£ vi·∫øt tr√™n Firestore.
 * @returns {Promise<object|null>} - Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng c√¥ng vi·ªác ho·∫∑c null.
 */
async function findNextChapterToDo_Online() {
  const booksSnapshot = await db.collection("books").get();
  for (const bookDoc of booksSnapshot.docs) {
    const bookData = bookDoc.data();
    // B·ªè qua n·∫øu s√°ch ch∆∞a c√≥ d√†n √Ω ƒë∆∞·ª£c ƒë·ªìng b·ªô l√™n
    if (!bookData.chaptersOutline || bookData.chaptersOutline.length === 0)
      continue;

    const writtenChaptersSnapshot = await bookDoc.ref
      .collection("chapters")
      .get();
    const writtenChapterNumbers = new Set(
      writtenChaptersSnapshot.docs.map((doc) => parseInt(doc.id, 10))
    );

    for (const chapterInfo of bookData.chaptersOutline) {
      if (!writtenChapterNumbers.has(chapterInfo.chapter)) {
        // ƒê√£ t√¨m th·∫•y ch∆∞∆°ng c√≤n thi·∫øu!
        const previousChapterSummary =
          chapterInfo.chapter > 1
            ? bookData.chaptersOutline[chapterInfo.chapter - 2].summary
            : null;

        return {
          bookSlug: bookData.slug,
          bookTitle: bookData.title,
          genre: bookData.genre,
          chapterInfo,
          previousChapterSummary,
        };
      }
    }
  }
  return null; // Kh√¥ng t√¨m th·∫•y vi·ªác g√¨ ƒë·ªÉ l√†m tr√™n to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu
}

/**
 * H√†m ch√≠nh ch·ª©a v√≤ng l·∫∑p v√¥ t·∫≠n c·ªßa worker.
 */
async function startOnlineWorker() {
  console.log(
    "üöÄ Online AI Novel Worker logic has started (running as a Web Service)."
  );
  while (true) {
    try {
      // B∆∞·ªõc 1: T√¨m m·ªôt c√¥ng vi·ªác ƒë·ªÉ l√†m
      const taskInfo = await findNextChapterToDo_Online();

      if (!taskInfo) {
        console.log(
          `(Online) No tasks found. Checking again in ${CHECK_INTERVAL_MINUTES} minutes...`
        );
        await sleep(CHECK_INTERVAL_MINUTES * 60 * 1000);
        continue;
      }

      // B∆∞·ªõc 2: ƒê√≤i quy·ªÅn th·ª±c hi·ªán c√¥ng vi·ªác m·ªôt c√°ch an to√†n
      const canWork = await claimChapterTask(taskInfo.bookSlug);

      if (!canWork) {
        console.log(
          `(Online) [${taskInfo.bookSlug}] Could not claim task. It might be locked by another worker or the daily limit is reached.`
        );
        await sleep(5000); // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi t√¨m vi·ªác m·ªõi ƒë·ªÉ tr√°nh spam
        continue;
      }

      // B∆∞·ªõc 3: N·∫øu ƒë√≤i quy·ªÅn th√†nh c√¥ng, b·∫Øt ƒë·∫ßu l√†m vi·ªác
      const {
        bookSlug,
        bookTitle,
        genre,
        chapterInfo,
        previousChapterSummary,
      } = taskInfo;
      console.log(
        `\n(Online) Task claimed! Writing [Chapter ${chapterInfo.chapter}: ${chapterInfo.title}] for "${bookTitle}"...`
      );

      // G·ªçi AI ƒë·ªÉ t·∫°o n·ªôi dung
      const chapterPrompt = prompts.createChapterContent(
        bookTitle,
        genre,
        chapterInfo.title,
        chapterInfo.summary,
        previousChapterSummary
      );
      const chapterContent = await generateText(chapterPrompt);

      // L∆∞u k·∫øt qu·∫£ th·∫≥ng v√†o Firestore
      const chapterId = String(chapterInfo.chapter).padStart(2, "0");
      const chapterRef = db
        .collection("books")
        .doc(bookSlug)
        .collection("chapters")
        .doc(chapterId);

      await chapterRef.set({
        title: chapterInfo.title,
        chapterNumber: chapterInfo.chapter,
        content: chapterContent, // L∆∞u n·ªôi dung ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
      });
      console.log(`‚úÖ (Online) Saved Chapter ${chapterId} to Firestore.`);
      await sleep(2000); // Ngh·ªâ m·ªôt ch√∫t gi·ªØa c√°c l·∫ßn l√†m vi·ªác
    } catch (error) {
      console.error("\n‚ùå An error occurred in the online worker loop.", error);
      await sleep(5 * 60 * 1000); // N·∫øu c√≥ l·ªói, ch·ªù 5 ph√∫t r·ªìi th·ª≠ l·∫°i
    }
  }
}

// --- PH·∫¶N 4: WEB SERVER GI·∫¢ ƒê·ªÇ "ƒê√ÅNH L·ª™A" KOYEB ---
const app = express();
// Koyeb s·∫Ω t·ª± ƒë·ªông cung c·∫•p bi·∫øn PORT. N·∫øu ch·∫°y local ƒë·ªÉ test, d√πng port 3001.
const PORT = process.env.PORT || 3001;

// Endpoint g·ªëc (/) d√πng ƒë·ªÉ Koyeb ki·ªÉm tra s·ª©c kh·ªèe (health check)
app.get("/", (req, res) => {
  res
    .status(200)
    .send(
      `AI Novel Worker is alive and running. Timestamp: ${new Date().toISOString()}`
    );
});

// Endpoint ƒë·ªÉ xem tr·∫°ng th√°i (t√πy ch·ªçn, h·ªØu √≠ch ƒë·ªÉ g·ª° l·ªói)
app.get("/status", (req, res) => {
  res.json({
    status: "running",
    message: "Worker logic is active in a background loop.",
  });
});

// Kh·ªüi ƒë·ªông server gi·∫£. Sau khi server s·∫µn s√†ng, worker ch√≠nh m·ªõi b·∫Øt ƒë·∫ßu ch·∫°y.
app.listen(PORT, () => {
  console.log(
    `Dummy server listening on port ${PORT} for platform health checks.`
  );
  startOnlineWorker(); // K√≠ch ho·∫°t v√≤ng l·∫∑p v√¥ t·∫≠n c·ªßa worker
});
