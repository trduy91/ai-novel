// main.js
const fs = require("fs");
const path = require("path");
const inquirer = require("inquirer");
const { generateText } = require("./gemini");
const prompts = require("./prompts");
const { canGenerate, recordGeneration } = require("./state");
const { slugify, BOOKS_DIR } = require("../helper");

/**
 * H√†m ch√≠nh ƒë·ªÉ vi·∫øt c√°c ch∆∞∆°ng, ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i v√† gi·ªõi h·∫°n h√†ng ng√†y.
 * @param {string} bookDir - ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c c·ªßa s√°ch.
 * @param {object} outlineJSON - ƒê·ªëi t∆∞·ª£ng d√†n √Ω ƒë√£ ƒë∆∞·ª£c parse.
 */
async function writeChapters(bookDir, outlineJSON) {
  console.log("\nB·∫Øt ƒë·∫ßu/Ti·∫øp t·ª•c qu√° tr√¨nh vi·∫øt ch∆∞∆°ng...");
  const { title: bookTitle, genre, chapters } = outlineJSON;
  const bookSlug = path.basename(bookDir); // L·∫•y slug t·ª´ ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c

  for (const chapterInfo of chapters) {
    const chapterFileName = `${String(chapterInfo.chapter).padStart(
      2,
      "0"
    )}-${slugify(chapterInfo.title)}.md`;
    const chapterFilePath = path.join(bookDir, chapterFileName);

    // --- LOGIC QUAN TR·ªåNG: KI·ªÇM TRA N·∫æU CH∆Ø∆†NG ƒê√É T·ªíN T·∫†I ---
    if (fs.existsSync(chapterFilePath)) {
      console.log(`Ch∆∞∆°ng ${chapterInfo.chapter} ƒë√£ t·ªìn t·∫°i, b·ªè qua.`);
      continue;
    }

    // Ki·ªÉm tra gi·ªõi h·∫°n h√†ng ng√†y tr∆∞·ªõc khi t·∫°o ch∆∞∆°ng m·ªõi
    // if (!canGenerate(bookSlug)) {
    //   console.log(`ƒê√£ ƒë·∫°t gi·ªõi h·∫°n cho truy·ªán "${bookSlug}" h√¥m nay.`);
    //   break; // D·ª´ng l·∫°i n·∫øu ƒë√£ ƒë·∫°t gi·ªõi h·∫°n
    // }

    console.log(
      `\nChu·∫©n b·ªã vi·∫øt Ch∆∞∆°ng ${chapterInfo.chapter}: ${chapterInfo.title}...`
    );

    const previousChapterSummary =
      chapterInfo.chapter > 1
        ? chapters[chapterInfo.chapter - 2].summary
        : null;

    const chapterPrompt = prompts.createChapterContent(
      bookTitle,
      genre,
      chapterInfo.title,
      chapterInfo.summary,
      previousChapterSummary
    );

    try {
      const chapterContent = await generateText(chapterPrompt);
      fs.writeFileSync(
        chapterFilePath,
        `# Ch∆∞∆°ng ${chapterInfo.chapter}: ${chapterInfo.title}\n\n${chapterContent}`
      );
      console.log(
        `ƒê√£ vi·∫øt v√† l∆∞u th√†nh c√¥ng Ch∆∞∆°ng ${chapterInfo.chapter} v√†o file ${chapterFileName}`
      );
      recordGeneration(bookSlug); // Ghi nh·∫≠n ƒë√£ t·∫°o 1 ch∆∞∆°ng
    } catch (error) {
      console.error(
        `G·∫∑p l·ªói khi t·∫°o n·ªôi dung ch∆∞∆°ng ${chapterInfo.chapter}. S·∫Ω th·ª≠ l·∫°i v√†o l·∫ßn ch·∫°y sau.`
      );
      break; // D·ª´ng v√≤ng l·∫∑p n·∫øu c√≥ l·ªói API
    }
  }
}

/**
 * Lu·ªìng c√¥ng vi·ªác cho ph√©p ng∆∞·ªùi d√πng ch·ªçn m·ªôt ch∆∞∆°ng v√† y√™u c·∫ßu AI vi·∫øt l·∫°i.
 */
async function reworkChapter() {
  console.log("\n[‚úèÔ∏è Ch·ªânh s·ª≠a/Vi·∫øt l·∫°i m·ªôt ch∆∞∆°ng]");
  
  // 1. Ch·ªçn truy·ªán
  const bookSlugs = fs.readdirSync(BOOKS_DIR).filter(f => fs.statSync(path.join(BOOKS_DIR, f)).isDirectory());
  if (bookSlugs.length === 0) {
    console.log("Kh√¥ng c√≥ truy·ªán n√†o ƒë·ªÉ ch·ªânh s·ª≠a.");
    return;
  }
  const { selectedBook } = await inquirer.prompt([{ type: 'list', name: 'selectedBook', message: 'Ch·ªçn truy·ªán b·∫°n mu·ªën ch·ªânh s·ª≠a:', choices: bookSlugs }]);
  const bookDir = path.join(BOOKS_DIR, selectedBook);
  const outline = JSON.parse(fs.readFileSync(path.join(bookDir, 'outline.json'), 'utf-8'));

  // 2. Ch·ªçn ch∆∞∆°ng ƒë√£ ƒë∆∞·ª£c vi·∫øt
  const writtenChapters = outline.chapters.filter(chap => {
    const chapterFileName = `${String(chap.chapter).padStart(2, '0')}-${slugify(chap.title)}.md`;
    return fs.existsSync(path.join(bookDir, chapterFileName));
  }).map(chap => ({ name: `Ch∆∞∆°ng ${chap.chapter}: ${chap.title}`, value: chap }));

  if (writtenChapters.length === 0) {
    console.log("Truy·ªán n√†y ch∆∞a c√≥ ch∆∞∆°ng n√†o ƒë∆∞·ª£c vi·∫øt. H√£y ch·∫°y worker tr∆∞·ªõc.");
    return;
  }
  const { selectedChapterInfo } = await inquirer.prompt([{ type: 'list', name: 'selectedChapterInfo', message: 'Ch·ªçn ch∆∞∆°ng b·∫°n mu·ªën vi·∫øt l·∫°i:', choices: writtenChapters }]);

  // 3. ƒê·ªçc n·ªôi dung g·ªëc v√† y√™u c·∫ßu ch·ªâ d·∫´n
  const originalFileName = `${String(selectedChapterInfo.chapter).padStart(2, '0')}-${slugify(selectedChapterInfo.title)}.md`;
  const originalFilePath = path.join(bookDir, originalFileName);
  const originalContent = fs.readFileSync(originalFilePath, 'utf-8');

  console.log("\n--- N·ªòI DUNG CH∆Ø∆†NG HI·ªÜN T·∫†I ---");
  console.log(originalContent);
  console.log("---------------------------------");

  const { instructions } = await inquirer.prompt([{ type: 'input', name: 'instructions', message: "H√£y ƒë∆∞a ra ch·ªâ d·∫´n ƒë·ªÉ vi·∫øt l·∫°i (v√≠ d·ª•: 'th√™m y·∫øu t·ªë h√†i h∆∞·ªõc', 'l√†m cho ƒëo·∫°n k·∫øt k·ªãch t√≠nh h∆°n'):" }]);
  if (!instructions) {
    console.log("ƒê√£ h·ªßy b·ªè.");
    return;
  }

  // 4. G·ªçi AI v√† hi·ªÉn th·ªã k·∫øt qu·∫£
  console.log("\nƒêang y√™u c·∫ßu AI vi·∫øt l·∫°i ch∆∞∆°ng...");
  const reworkPrompt = prompts.reworkChapterContent(selectedChapterInfo.title, originalContent, instructions);
  const rawReworkedContent = await generateText(reworkPrompt);
  const reworkedContent = cleanChapterContent(rawReworkedContent);

  console.log("\n--- PHI√äN B·∫¢N ƒê√É VI·∫æT L·∫†I ---");
  console.log(reworkedContent);
  console.log("-------------------------------");

  // 5. H·ªèi ƒë·ªÉ l∆∞u l·∫°i
  const { shouldSave } = await inquirer.prompt([{ type: 'confirm', name: 'shouldSave', message: 'B·∫°n c√≥ mu·ªën l∆∞u phi√™n b·∫£n m·ªõi n√†y kh√¥ng? (N√≥ s·∫Ω ƒë∆∞·ª£c l∆∞u th√†nh m·ªôt file ri√™ng, kh√¥ng ghi ƒë√® file c≈©)', default: true }]);

  if (shouldSave) {
    const timestamp = new Date().getTime();
    const newFileName = originalFileName.replace('.md', `_v${timestamp}.md`);
    const newFilePath = path.join(bookDir, newFileName);
    fs.writeFileSync(newFilePath, `# Ch∆∞∆°ng ${selectedChapterInfo.chapter}: ${selectedChapterInfo.title} (v${timestamp})\n\n${reworkedContent}`);
    console.log(`ƒê√£ l∆∞u phi√™n b·∫£n m·ªõi th√†nh c√¥ng t·∫°i: ${newFilePath}`);
    console.log("B·∫°n c√≥ th·ªÉ x√≥a file c≈© v√† ƒë·ªïi t√™n file m·ªõi n·∫øu mu·ªën s·ª≠ d·ª•ng n√≥ l√†m phi√™n b·∫£n ch√≠nh.");
  } else {
    console.log("ƒê√£ h·ªßy l∆∞u.");
  }
}

/**
 * T√ÅI S·ª¨ D·ª§NG: H√†m t·∫°o, hi·ªÉn th·ªã v√† y√™u c·∫ßu ng∆∞·ªùi d√πng x√°c nh·∫≠n d√†n √Ω.
 * @param {string} title - T·ª±a ƒë·ªÅ s√°ch.
 * @param {string} genre - Th·ªÉ lo·∫°i s√°ch.
 * @returns {Promise<object|null>} - Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng d√†n √Ω n·∫øu ƒë∆∞·ª£c ch·∫•p nh·∫≠n, ho·∫∑c null n·∫øu b·ªã h·ªßy.
 */
async function generateAndConfirmOutline(title, genre) {
  const REGENERATE_OUTLINE = 'regenerate';
  const ACCEPT_OUTLINE = 'accept';
  const CANCEL_CREATION = 'cancel';

  while (true) {
    console.log("\nƒêang t·∫°o d√†n √Ω cho c√¢u chuy·ªán...");
    let parsedOutline;
    try {
      const outlinePrompt = prompts.createOutline(title, genre);
      const outlineResponse = await generateText(outlinePrompt);
      const cleanResponse = outlineResponse.replace(/```json/g, '').replace(/```/g, '').trim();
      parsedOutline = JSON.parse(cleanResponse);
    } catch (e) {
      console.error("L·ªói khi t·∫°o ho·∫∑c ph√¢n t√≠ch d√†n √Ω t·ª´ AI. ƒêang th·ª≠ l·∫°i...", e);
      continue; // Th·ª≠ l·∫°i n·∫øu c√≥ l·ªói
    }

    console.log("\n--- D√ÄN √ù ƒê·ªÄ XU·∫§T ---");
    console.log(JSON.stringify(parsedOutline, null, 2));
    console.log("----------------------");

    const { userAction } = await inquirer.prompt([
      {
        type: 'list',
        name: 'userAction',
        message: 'B·∫°n c√≥ ch·∫•p nh·∫≠n d√†n √Ω n√†y kh√¥ng?',
        choices: [
          { name: '‚úÖ ƒê·ªìng √Ω, s·ª≠ d·ª•ng d√†n √Ω n√†y', value: ACCEPT_OUTLINE },
          { name: 'üîÑ Kh√¥ng, t·∫°o l·∫°i d√†n √Ω kh√°c', value: REGENERATE_OUTLINE },
          { name: '‚ùå H·ªßy b·ªè', value: CANCEL_CREATION }
        ]
      }
    ]);

    if (userAction === ACCEPT_OUTLINE) {
      return parsedOutline; // Th√†nh c√¥ng, tr·∫£ v·ªÅ d√†n √Ω
    }

    if (userAction === CANCEL_CREATION) {
      return null; // Ng∆∞·ªùi d√πng h·ªßy, tr·∫£ v·ªÅ null
    }
    // N·∫øu ch·ªçn 'regenerate', v√≤ng l·∫∑p s·∫Ω t·ª± ƒë·ªông ch·∫°y l·∫°i
  }
}

/**
 * Lu·ªìng c√¥ng vi·ªác ƒë·ªÉ t·∫°o m·ªôt cu·ªën ti·ªÉu thuy·∫øt ho√†n to√†n m·ªõi.
 */
async function startNewNovel() {
  console.log("\nB·∫Øt ƒë·∫ßu t·∫°o m·ªôt ti·ªÉu thuy·∫øt m·ªõi...");

  // 1. L·∫•y th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
  const answers = await inquirer.prompt([
    {
      type: "input",
      name: "genre",
      message:
        "Nh·∫≠p th·ªÉ lo·∫°i ti·ªÉu thuy·∫øt (v√≠ d·ª•: Khoa h·ªçc vi·ªÖn t∆∞·ªüng, L√£ng m·∫°n):",
    },
    {
      type: "input",
      name: "keywords",
      message: "Nh·∫≠p m·ªôt v√†i t·ª´ kh√≥a (kh√¥ng b·∫Øt bu·ªôc):",
    },
  ]);
  const { genre, keywords } = answers;

  // --- V√íNG L·∫∂P T·∫†O T·ª∞A ƒê·ªÄ ---
  let selectedTitle;
  const REGENERATE_TITLES = "_REGENERATE_TITLES_";

  while (true) {
    console.log("\nƒêang t·∫°o danh s√°ch t·ª±a ƒë·ªÅ s√°ch...");
    const titlePrompt = prompts.createTitle(genre, keywords);
    const titleResponse = await generateText(titlePrompt);
    const titles = titleResponse
      .trim()
      .split("\n")
      .map((t) => t.replace(/^(\d+\.\s*|-\s*|\*\s*)/, "").trim());

    const { chosenTitle } = await inquirer.prompt([
      {
        type: "list",
        name: "chosenTitle",
        message: "Ch·ªçn m·ªôt t·ª±a ƒë·ªÅ b·∫°n th√≠ch ho·∫∑c t·∫°o l·∫°i:",
        choices: [
          ...titles,
          new inquirer.Separator(),
          { name: "üîÑ T·∫°o l·∫°i danh s√°ch kh√°c", value: REGENERATE_TITLES },
        ],
      },
    ]);

    if (chosenTitle !== REGENERATE_TITLES) {
      selectedTitle = chosenTitle;
      break; // Tho√°t v√≤ng l·∫∑p khi ng∆∞·ªùi d√πng ƒë√£ ch·ªçn ƒë∆∞·ª£c t·ª±a ƒë·ªÅ
    }
    // N·∫øu kh√¥ng, v√≤ng l·∫∑p s·∫Ω t·ª± ƒë·ªông ch·∫°y l·∫°i
  }

  console.log(`B·∫°n ƒë√£ ch·ªçn: "${selectedTitle}"`);
  const bookSlug = slugify(selectedTitle);
  const bookDir = path.join(BOOKS_DIR, bookSlug);
  if (fs.existsSync(bookDir)) {
    console.log(
      "Th∆∞ m·ª•c cho truy·ªán n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn m·ªôt t·ª±a ƒë·ªÅ kh√°c."
    );
    return;
  }
  fs.mkdirSync(bookDir, { recursive: true });

  const outlineJSON = await generateAndConfirmOutline(selectedTitle, genre);

  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ h·ªßy b·ªè
  if (!outlineJSON) {
    console.log("ƒê√£ h·ªßy t·∫°o truy·ªán. X√≥a th∆∞ m·ª•c t·∫°m...");
    fs.rmSync(bookDir, { recursive: true, force: true });
    return;
  }


  fs.writeFileSync(
    path.join(bookDir, "outline.json"),
    JSON.stringify(outlineJSON, null, 2)
  );
  console.log("ƒê√£ l∆∞u d√†n √Ω v√†o file outline.json");
  // H·ªèi ng∆∞·ªùi d√πng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu vi·∫øt
  const { startWritingNow } = await inquirer.prompt([
    {
      type: "confirm", // D·∫°ng c√¢u h·ªèi Yes/No
      name: "startWritingNow",
      message:
        "B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu vi·∫øt c√°c ch∆∞∆°ng ƒë·∫ßu ti√™n ngay b√¢y gi·ªù kh√¥ng?",
      default: true, // M·∫∑c ƒë·ªãnh l√† 'Yes'
    },
  ]);

  if (startWritingNow) {
    // N·∫øu ng∆∞·ªùi d√πng ƒë·ªìng √Ω, b·∫Øt ƒë·∫ßu vi·∫øt
    await writeChapters(bookDir, outlineJSON);
  } else {
    // N·∫øu kh√¥ng, ch·ªâ c·∫ßn th√¥ng b√°o v√† k·∫øt th√∫c
    console.log(
      "\nOK! D√†n √Ω ƒë√£ ƒë∆∞·ª£c l∆∞u. B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh v√† ch·ªçn 'Ti·∫øp t·ª•c' ƒë·ªÉ b·∫Øt ƒë·∫ßu vi·∫øt b·∫•t c·ª© l√∫c n√†o."
    );
  }

}

/**
 * Lu·ªìng c√¥ng vi·ªác ƒë·ªÉ ti·∫øp t·ª•c m·ªôt cu·ªën ti·ªÉu thuy·∫øt ƒë√£ c√≥.
 * @param {string} bookSlug - T√™n th∆∞ m·ª•c c·ªßa s√°ch.
 */
async function continueNovel(bookSlug) {
  console.log(`\nTi·∫øp t·ª•c vi·∫øt ti·ªÉu thuy·∫øt: "${bookSlug}"`);
  const bookDir = path.join(BOOKS_DIR, bookSlug);
  const outlinePath = path.join(bookDir, "outline.json");
  let outlineJSON;
  if (fs.existsSync(outlinePath)) {
    // Tr∆∞·ªùng h·ª£p b√¨nh th∆∞·ªùng: file t·ªìn t·∫°i
    const outlineData = fs.readFileSync(outlinePath, 'utf-8');
    outlineJSON = JSON.parse(outlineData);
  } else {
    // --- TR∆Ø·ªúNG H·ª¢P L·ªñI: File kh√¥ng t·ªìn t·∫°i ---
    console.warn(`‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file 'outline.json' cho truy·ªán "${bookSlug}".`);
    const { shouldRegenerate } = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'shouldRegenerate',
        message: 'B·∫°n c√≥ mu·ªën t·∫°o l·∫°i d√†n √Ω cho truy·ªán n√†y kh√¥ng?',
        default: false
      }
    ]);

    if (!shouldRegenerate) {
      console.log("H·ªßy b·ªè thao t√°c. Vui l√≤ng ki·ªÉm tra l·∫°i th∆∞ m·ª•c s√°ch.");
      return;
    }

    // V√¨ outline c≈© ƒë√£ m·∫•t, ch√∫ng ta ph·∫£i h·ªèi l·∫°i th·ªÉ lo·∫°i
    const { genre } = await inquirer.prompt([
      {
        type: 'input',
        name: 'genre',
        message: `Vui l√≤ng nh·∫≠p l·∫°i th·ªÉ lo·∫°i cho truy·ªán "${bookSlug}":`
      }
    ]);

    // L·∫•y l·∫°i t·ª±a ƒë·ªÅ t·ª´ slug (ƒë√¢y l√† c√°ch t·ªët nh·∫•t c√≥ th·ªÉ)
    const reconstructedTitle = bookSlug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    console.log(`S·ª≠ d·ª•ng t·ª±a ƒë·ªÅ t·∫°m th·ªùi: "${reconstructedTitle}"`);
    
    const newOutline = await generateAndConfirmOutline(reconstructedTitle, genre);

    if (!newOutline) {
      console.log("ƒê√£ h·ªßy t·∫°o d√†n √Ω m·ªõi.");
      return;
    }
    
    // L∆∞u d√†n √Ω m·ªõi v√† g√°n n√≥ ƒë·ªÉ ti·∫øp t·ª•c
    fs.writeFileSync(outlinePath, JSON.stringify(newOutline, null, 2));
    console.log("ƒê√£ t·∫°o v√† l∆∞u d√†n √Ω m·ªõi th√†nh c√¥ng!");
    outlineJSON = newOutline;
  }
  await writeChapters(bookDir, outlineJSON);
}

/**
 * H√†m kh·ªüi ƒë·ªông ch√≠nh c·ªßa ·ª©ng d·ª•ng
 */
async function main() {
  console.log("Ch√†o m·ª´ng ƒë·∫øn v·ªõi Tr·ª£ l√Ω vi·∫øt ti·ªÉu thuy·∫øt AI!");

  // Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c 'books' n·∫øu ch∆∞a c√≥
  if (!fs.existsSync(BOOKS_DIR)) {
    fs.mkdirSync(BOOKS_DIR);
  }

  const existingBooks = fs
    .readdirSync(BOOKS_DIR, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name);

  let choice;

  if (existingBooks.length > 0) {
    // N·∫øu c√≥ s√°ch c≈©, cho ng∆∞·ªùi d√πng l·ª±a ch·ªçn
    const { userAction } = await inquirer.prompt([
      {
        type: "list",
        name: "userAction",
        message: "B·∫°n mu·ªën l√†m g√¨?",
        choices: [
          { name: "Ti·∫øp t·ª•c vi·∫øt m·ªôt truy·ªán dang d·ªü", value: "continue" },
          { name: "T·∫°o m·ªôt ti·ªÉu thuy·∫øt m·ªõi", value: "new" },
          { name: '‚úèÔ∏è  Ch·ªânh s·ª≠a/Vi·∫øt l·∫°i m·ªôt ch∆∞∆°ng', value: 'rework' }, 
          new inquirer.Separator(),
          { name: "Tho√°t", value: "exit" },
        ],
      },
    ]);
    choice = userAction;

    if (choice === "continue") {
      const { selectedBook } = await inquirer.prompt([
        {
          type: "list",
          name: "selectedBook",
          message: "Ch·ªçn ti·ªÉu thuy·∫øt ƒë·ªÉ ti·∫øp t·ª•c:",
          choices: existingBooks,
        },
      ]);
      await continueNovel(selectedBook);
    } else if (choice === "new") {
      await startNewNovel();
    } else if (choice === 'rework') {
      await reworkChapter();
    } else {
      console.log("T·∫°m bi·ªát!");
      return;
    }
  } else {
    // N·∫øu kh√¥ng c√≥ s√°ch n√†o, ch·ªâ c√≥ l·ª±a ch·ªçn t·∫°o m·ªõi
    console.log("Ch∆∞a c√≥ d·ª± √°n ti·ªÉu thuy·∫øt n√†o. H√£y b·∫Øt ƒë·∫ßu t·∫°o m·ªôt c√°i m·ªõi!");
    await startNewNovel();
  }

  console.log(
    "\nHo√†n th√†nh phi√™n l√†m vi·ªác! Ki·ªÉm tra th∆∞ m·ª•c 'books' ƒë·ªÉ xem k·∫øt qu·∫£."
  );
}

main().catch(console.error);
